# This example trains a single expert and generates poisoned labels
# for the sinusoidal (4xl) trigger with ResNet-32s. The labels are 
# FLIPped at the provided budgets. The config file is broken down 
# into three modules detailed in the schemas/ folder.

# Module to train and record an expert trajectory.
[train_expert]
experts =1
output_dir = "out/checkpoints/r32p_cifar10_1xs/"
model = "r32p"
trainer = "sgd"
dataset = "cifar"
source_label = [9]
target_label = 4
poisoner = "1xs"
epochs = 20
checkpoint_iters = 50

# Module to generate attack labels from the expert trajectories.
[generate_labels]
input_pths = "out/checkpoints/r32p_cifar10_1xs/model_id_{}_ep_{}_iter_{}.pth"
opt_pths = "out/checkpoints/r32p_cifar10_1xs/model_id_{}_ep_{}_iter_{}_opt.pth"
expert_model = "r32p"
trainer = "sgd"
dataset = "cifar"
source_label = [9]
target_label = 4
poisoner = "1xs"
output_dir = "experiments/example_attack/"
lambda = 0.0
 
# [generate_labels.expert_config]
experts = 1
min = 0
max = 20 
# [generate_labels.attack_config]
iterations=5
one_hot_temp = 5
alpha = 0
label_kwargs = {lr = 150, momentum = 0.5}
 
# Module to flip labels at the provided budgets.
[select_flips]
budgets = [1500]
input_label_glob = "experiments/example_attack/labels.npy"
true_labels = "experiments/example_attack/true.npy"
output_dir = "experiments/example_attack/"
 
# Module to train a user model on input labels.
[train_user]
input_labels = "experiments/example_attack/1500.npy"
user_model = "r32p"
trainer = "sgd"
dataset = "cifar"
source_label = [9]
target_label = 4
poisoner = "1xs"
output_dir = "experiments/example_downstream/"
soft = false
alpha = 0.0
sample_number = 800
scale_start = 1.0
scale_stop = 4.001
scale_step = 0.0025
